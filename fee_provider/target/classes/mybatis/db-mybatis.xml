<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="dataSourceTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${db.jdbc.driver}"/>
        <property name="url" value="${db.jdbc.connection.url}"/>
        <property name="username" value="${db.jdbc.username}"/>
        <property name="password" value="${db.jdbc.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="10"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="100"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="5000"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="120000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="40000"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="select 1"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="50"/>
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                                    监控统计用的filter:stat
                                    日志用的filter:log4j
                                    防御SQL注入的filter:wall -->
        <property name="filters" value="stat"/>
    </bean>

   <!-- <bean id="dataSource" class="com.dianping.zebra.group.jdbc.GroupDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 必配。指定唯一确定数据库的key&ndash;&gt;
        <property name="jdbcRef" value="fr_f_fee_product" />
        &lt;!&ndash; 选配。指定底层使用的连接池类型，支持"c3p0","tomcat-jdbc","druid","hikaricp","dbcp2"和"dbcp"，推荐使用"druid"或者"dbcp2"，版本2.10.3之后默认值为"druid"，之前版本默认值为"c3p0" &ndash;&gt;
        <property name="poolType" value="druid" />
        &lt;!&ndash; 选配。指定连接池的最小连接数，默认值是5。 &ndash;&gt;
        <property name="minPoolSize" value="20" />
        &lt;!&ndash; 选配。指定连接池的最大连接数，默认值是20。 &ndash;&gt;
        <property name="maxPoolSize" value="100" />
        &lt;!&ndash; 选配。指定连接池的初始化连接数，默认值是5。 &ndash;&gt;
        <property name="initialPoolSize" value="10" />
        &lt;!&ndash; 选配。指定连接池的获取连接的超时时间，默认值是1000。 &ndash;&gt;
        <property name="checkoutTimeout" value="5000" />
        &lt;!&ndash; 超过时间限制多长； &ndash;&gt;
        <property name="removeAbandonedTimeout" value="120000"/>
        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="40000"/>
    </bean>
-->

    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mybatis/mappers/*.xml"/>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.flightroutes.flight.fee.repository"/>
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>


</beans>
